;; PROJECT EULER exercises

#|
1. If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

(defun sumfun (n) 
    (cond 
        ((= n 1) 0)
        (t
          (cond
            ((= (mod n 3) 0) (+ n (sumfun (- n 1))))
            ((= (mod n 5) 0) (+ n (sumfun (- n 1))))
            (t (+ 0 (sumfun (- n 1))))
          )  
        )
    )
)

(defun multiples (n)
    (sumfun (- n 1))
)

(write (multiples 1000))
|#


#|
2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(defun fib (n) 
    (defvar e1 2)
    (defvar e2 8)
    (defvar res 0)
    (defvar tmp 0)
    
    (loop 
        (setq res (+ res e1))
        (setq tmp e2)
        (setq e2 (+ (* e2 4) e1))
        (setq e1 tmp)
        
        (when (> e1 n) (return res))
    )
)

(write (fib 4000000))

P.S. Although the code is working, this solution
might be wrong due to my lack of experience with Common Lisp
|# 
